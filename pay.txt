支付

	参数必填
	1.生成一个随机数订单号：17位长度的时间戳加3位长度的数字字母随机字符串，订单号长度：20 
	2.使用TreeMap 拼接参数
	3.将参数列表 转为json  , json+md5密钥  进行MD5加密 ，再拼接参数
	4.公钥加密  （算法加密后输出的都是byte[]，而这个byte[]对我们显示的形式是不友好的（乱码）
		 使用BASE64Encoder().encode(）转为base64  BASE64转码、
		使用URLEncoder.encode(内容, 字符编码);    URLEncode转码
	5.ToolKit.request（url,最后拼接的参数转码串）  提交请求 访问netway地址进行  支付订单
		 Context接口。它表示命令执行的上下文，在命令间实现共享信息的传递。Context接口的父接口是Map，ContextBase实		现了Context
		
		这个接口中处理验证信息是否正确


问题  
	1.查询接口  每次是获取的 随机生成 的 订单号


1.发送的参数数据进行封装 data  参数进行顺序排列
2.MD5加密  key
3.data+key  生成签名
4.进行rsa加密  base64转码  url转码
5.提交报文 data= no= version=


//构造函数，生成请求URL
String sHtmlText = GatewayEgService.directPay(sParaTemp);
System.out.println("支付请求payUrl==========" + urlPath);
return GatewayEgSubmit.buildForm(sParaTemp, urlPath, "post", strButtonName);

---爱农  
pay()
1.根据规定 封装参数   这里还需要 sign method ：MD5 与 signature 根据指定sign方法（需要signkey） 封装好
2.这里是 map参数组装成form表单   
3.保存日志报文  saveDataPacket(DataPacketType.REQ, orderNum, order.getClient_IP(), DataPacketType.REQ, msg.toString());
4.保存 自动提交的html表单代码 saveDataFormLog(orderNum, html)
5.set 进去 order.setQR_Code_Url(EBankUtils.getPayUrl(dataFormLog.getId() + "&" + orderNum));
5.返回成功

payResultQuery()
1.按照规定 封装参数
2.配置好 queryUrl 发起请求 ，回去返回的 String result参数 转换为json
3.保存日志报文
4. 获取指定的key 看是否成功
5. 进行验签，查看是否是 指定的sign 避免 在传输过程个发生变更。

payResult()
这个方法是接收  query 查询结果的接收 然后进行状态判断
接收result
1.转换 result为json
2.对传过来的sign 进行验签  这里有两种 有的写好了返回Boolean 方法， 有的没有方法 就需要再将参数进行 一下加密然后与现在传过来的sign进行对比 
3.根据文档传参 进行对状态的判断


remit
1.基本和pay方法 一致  封装参数 并且 生成sign 封装
2.保存报文
3. 发起请求 根据reqsultUrl 在后台配好的路径
4.获取请求result 进行验签 
5.这里保存上游返回订单状态  给客服看

remitResultQuery（）
1.封装参数
2.生成签名 并封装
3.保存报文日志
4.发起请求 根据queryUrl
5.获取相应的数据并封装 
6.orderNo clientIP data 这三个参数  put进值 然后 返回

remitResult();
1.获取到result，转为json
2.保存报文日志
3.获取指定状态参数
4.进行验签
5.状态处理  返回状态


--商银信  直接跳转到支付页面
pay()
1.封装基本参数与业务参数
2.根据 第三方的要求进行加密 
3.url和封装参数  生成html 跳转
4.保存报文日志
5.保存自动提交的html代码
6.setQR_Code_Url
7.返回通道类型

payResultQuery（）
1.封装参数   看看是否需要转换参数为第三方所需要的参数形式
2.保存日志报文
3.创建链接  请求接口
4.得到相应数据
5.保存响应报文
6.根据相应参数，进行状态判断 并且返回

payResult()
1.获得返回参数 转json
2.取得data
3.进行验签  验签形式根据 文档具体来做
4.对状态进行判断

remit()
1.根据要求封装参数
2.生成签名  并封装
3.保存报文日志
4.发起请求
5.保存响应日志
6.根据返回状态吗进行判断
7.保存上游返回订单状态

remitResultQuery（）
1.封装参数
2.生成签名
3.保存报文
4.发起请求 
5.获取返回数据  对响应数据操作
6.封装3个数据  orderNo   clientIP   data  并返回

remitResult（）
1.取到result 再取data
2.判断状态 并保存报文日志
3.去除sign 进行 验签
4。进行状态判断 并返回

--前海亿联
1.初始化参数  这里需要queryBalanceUrl 查询余额的url ,这个在 admin后台添加自定义属性可以配置上去
pay()
1.根据指定规则封装参数
2.签名并且封装
3.保存请求报文
4.发起请求
5.获取结果，这里查询返回的statusCode
6.判断为成功则进行验签，并且进行参数判断，
7.这里是返回form 表单 保存数据报文日志
8.保存响应报文
9.setQR_Code_Url
10.返回success 状态

payResultQuery()
1.封装参数
2.签名 并封装
3.保存请求数据
4.发起请求查询接口
5.得到响应数据
6.成功 继续进行校验，并返回相应的状态

payResult()
1.获取 result参数
2.取出data
3.进行验签
4.取状态码 成功状态返回success 

remit()
1.进行银行代码转换，这里有需要bank的一些 信息
2.拼装请求参数，签名 并封装
3.发起代付请求
4.解析响应的结果，成功 ，进行验签，返回具体状态码

remitResultQuery()


remitResult()



账户
======================================================================
拦截器
有两个 一个登录拦截器 一个权限拦截器 
拦截器中 写入 每操作一个步骤 就增加一条记录
在struts.xml 写入interceptors 拦截器
做查询
AdminUserInfoExample userInfoExample = new AdminUserInfoExample();  创建一个对象
userInfoExample.setPagination(condition.getPagination());  分页信息
AdminUserInfoExample.Criteria cri = userInfoExample.createCriteria(); 标准创建
userInfoExample.createCriteria().andUser_NameEqualTo（） 这么添加不为空的字段信息

做批量 修改
AdminUserInfoExample auie = new AdminUserInfoExample();
auie.createCriteria().andIdIn(userIdList);前台传过来的userIdList   内置方法

业务
=======================================================================
一.	新增业务code
CodeExample example = new CodeExample();
CodeExample.Criteria cri = example.createCriteria();
//内置方法
cri.and*****EqualTo()  EqualTo等于  例如  cri.andCodeEqualTo(data.getCode());


通道管理   上游通道action  PayChannelAction
=================================================================================
目前了解的流程是
	新加代码字典--添加网银通道--
	网银支付通道（对添加的通道进行配置）--
	网银通道商户（配置商户号，用来对接上游的） 
添加网银支付 save();

商户管理 Organization【商户表】  Ext 应该是扩展 一些属性
==============================================================================
添加商户  merch_preSav   merch_save.action
---使用这种形式 来判断请求的数据是否正确。。
CommandChain<String, Object> chain = new CommandChain<String, Object>();
chain.addCmd(new AddOrgUserLimitCommand());// 添加账号权限
boolean executeResult = chain.execute(ctx);
if (!executeResult) {
	throw new ServiceException((String) ctx.get(BaseCommand.STR_ERROR_INFO));
}

OrganizationChannelProperty【通道属性表】
organization_group【下游 商户分组表】
// 分页
oe.setPagination(organizationGroup.getPagination());
// 创建条件查询容器
OrganizationGroupExample.Criteria cri = oe.createCriteria();


button_mutil_rows_action_list.jsp



payDemo 跟踪代码
========================================================================
1.商户号是 下游 发起支付时候，这里生成的一个商户，还有MD5 密钥
2.封装参数
3.公钥加密 base64转码 url转码 并拼接商户号与版本号
4.发起支付请求==》跳转到 OrganizationOrderAction  pay() 支付控制器 接收到传过来的报文 并解 
			==》OrganizationOrderServiceImpl 支付订单pay()
5.先设置上下文，查询解密证书
	99：证书解密错误==  toolkit.java 中的公钥密钥没有 更改
	
6.支付核心代码
	设置上下文，命令链条逻辑处理
	CommandChain<String, Object> chain = new CommandChain<String, Object>();
	chain.addCmd(new JsonParamCommand());// JSON格式校验
	chain.addCmd(new VersionCommand());// 版本号校验
	chain.addCmd(new CharsetCommand()); // 字符编码校验
	chain.addCmd(new OrderNumCommand());// 订单号校验
	chain.addCmd(new MerNoCommand());// 商户号校验
	chain.addCmd(new QueryOrgCommand());// 商户状态校验
	chain.addCmd(new CallBackUrlCommand());// 回调地址校验
	chain.addCmd(new PayOrderEntityCommand());// 实体赋值
	chain.addCmd(new NetwayCommand());// 网关校验
	chain.addCmd(new ClientIPCommand());// 终端IP校验
	chain.addCmd(new DKParamCommand());// 点卡参数检查
	chain.addCmd(new QueryAgentCommand());// 查询代理商
	chain.addCmd(new QueryOrgPropertyCommand());// 查询商户通道属性
	chain.addCmd(new NetWayPayCommand());// 网关支付
	chain.addCmd(new RandomCommand());// 随机数检查
	chain.addCmd(new AmountCommand());// 金额检查
	chain.addCmd(new GoodsNameCommand());// 商品名称检查
	chain.addCmd(new CallBackViewUrlCommand());// 回显地址检查
	chain.addCmd(new SignCommand());// 校验签名
	chain.addCmd(new OrderNumRepeatCommand());// 订单号重复检查
	chain.addCmd(new SelectChannelCommand());// 选择支付通道  --》这里进行选择通道
	chain.addCmd(new InitPayServiceCommand());// 初始化支付通道实现
	chain.addCmd(new CalculationCommissionCommand());// 计算手续费和收益
	chain.addCmd(new InitOrderDefaultValueCommand());// 初始化支付订单默认值
	chain.addCmd(new SaveOrgSubmtPacketCommand());// 保存商户请求报文
	chain.addCmd(new PayCommand());// 保存支付订单、发起支付 --》这里根据选择的通道来进入代码 进行操作
----------------------------------------------
7.进入 写的pay(order ，org)代码中
		这里的处理逻辑可以查看上面的
			1.封装基本参数与业务参数
			2.根据 第三方的要求进行加密 
			3.url和封装参数  生成html 跳转
			4.保存报文日志
			5.保存自动提交的html代码
			6.setQR_Code_Url
			7.返回通道类型
			
-------------------------------------------------
查询接口
	1.封装参数   看看是否需要转换参数为第三方所需要的参数形式
	2.保存日志报文
	3.创建链接  请求接口
	4.得到相应数据
	5.保存响应报文
	6.根据相应参数，进行状态判断 并且返回



REMITDEMO 代码跟踪
=========================================================
1。。。以我们的封装模式进行封装
2.发起请求
3.命令链条逻辑处理
	chain.addCmd(new JsonParamCommand()); // JSON格式校验
	* 商户号校验
	 * 做了这些事情：
	 * 1、下游是否上送商户号，没有返回无效的商户号；
	 * 2、对下游上送的商户号进行非空校验，对上送的加密参数和未加密的商户号进行对比校验；
	 * 3、将通过校验的商户号加入上下文对象和签名列表；
	chain.addCmd(new MerNoCommand()); // 商户号校验
	chain.addCmd(new VersionCommand()); // 版本号校验
	chain.addCmd(new CharsetCommand()); // 编码校验
	chain.addCmd(new OrderNumCommand()); // 订单号合法性校验
	chain.addCmd(new QueryOrgCommand()); // 商户状态校验
	chain.addCmd(new QueryOrgPropertyCommand()); // 查询商户通道属性
	chain.addCmd(new RemitStateCommand()); // 商户代付状态校验
	chain.addCmd(new CallBackUrlCommand()); // 回调地址校验
	chain.addCmd(new RemitOrderEntityCommand()); // 为要保存的订单实体填充数据
	chain.addCmd(new BankCodeCommand()); // 银行代码校验
	chain.addCmd(new BankAccountNameCommand()); // 银行账户姓名校验
	chain.addCmd(new BankAccountNoCommand()); // 银行卡号校验
	chain.addCmd(new RemitAmountCommand()); // 平台金额校验
	chain.addCmd(new SignCommand()); // 签名校验
	chain.addCmd(new SelectRemitChannelCommand()); // 选择代付通道 --- 进行选择代付通道
	chain.addCmd(new InitRemitServiceCommand()); // 初始化代付通道实现
	chain.addCmd(new RemitRuleCommand()); // 通道金额限制校验
	chain.addCmd(new InitRemitOrderDefaultValueCommand()); // 初始化代付订单默认值
	chain.addCmd(new SaveOrgSubmitPacketCommand()); // 保存商户请求报文
	chain.addCmd(new RemitOrderNumRepeatCommand()); // 订单号重复检查
	chain.addCmd(new SaveOrderRemitCommand());// 保存代付订单
	chain.addCmd(new AutoRemitNoApproveCommand());// 自动付款，不需要审核



=================
后台正则判断
	1.
	Pattern p = Pattern.compile("^.*[\\s]+.*$");//不能包含空格、制表符、换页符等空白字符
	p.matcher(data.getContact_Mobile()).matches()
	2.
	data.getContact_Mobile().matches("^.*[\\s]+.*$")
==================



添加商户---重置MD5 密钥
===============================
Organization data = (Organization) ctx.get(OBJ_ORG_ENTITY);
OrganizationServiceImpl service = (OrganizationServiceImpl) ctx.get(OBJ_ORG_SERVICE);
-- new 一个商户
Organization checkOrg = new Organization();
try {
	// 密钥随机码
	String randomStr = RandomUtil.randomStr(24); 获取指定长度的随机字符串，包含大小写字母，数字
	checkOrg.setDES_Secret_Key(randomStr);
	while (!service.checkUniqueCode(checkOrg)) { -- 这里是进行了对 商户号与 md5 为条件的查询
		checkOrg.setDES_Secret_Key(randomStr);  -- 如果查询到了 那就在生成 一个随机码
	}
	data.setDES_Secret_Key(checkOrg.getDES_Secret_Key()); -- 这个是生成的随机码
	data.setSecret_Key(SecretUtil.MD5(checkOrg.getDES_Secret_Key())); --这个是 根据随机码 生成的md5密钥
	
	
Secret_Key  md5密钥
DES_Secret_Key  加密密钥

新建证书（给商户号进行添加公钥私钥）
==============================================
1.先查生成的商户号是否已经存在  存在就作废
2.
	//商户rsa加密密钥  支付RSA加密密钥  代付RSA加密密钥  走同一个方法
	KeyPairGenerator keyPairGenerator = initKeyPairGenerator();
	// 生成密钥对
	KeyPair keyPair = keyPairGenerator.generateKeyPair();
	// 公钥
	RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();
	// 私钥
	RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();

	
























































